const { Client, GatewayIntentBits } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, AudioPlayerInputType } = require('@discordjs/voice');
const { exec } = require('child_process');  // ‡πÉ‡∏ä‡πâ child_process ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ yt-dlp
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildVoiceStates, GatewayIntentBits.MessageContent] });
const prefix = process.env.PREFIX || '!';
const queue = new Map();

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°
client.once('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
async function playSong(guild, song) {
    const serverQueue = queue.get(guild.id);
    if (!song) {
        if (serverQueue) {
            serverQueue.connection.destroy();
            queue.delete(guild.id);
        }
        return;
    }

    try {
        const tempAudioFile = path.join(__dirname, 'temp_audio.mp3');  // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

        // ‡πÉ‡∏ä‡πâ yt-dlp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å YouTube
        exec(`yt-dlp -f bestaudio -o "${tempAudioFile}" ${song.url}`, (err, stdout, stderr) => {
            if (err) {
                console.error('Error executing yt-dlp:', err);
                if (serverQueue && serverQueue.connection) {
                    serverQueue.connection.destroy();
                }
                queue.delete(guild.id);
                guild.systemChannel?.send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á!');
                return;
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `stdout` ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á
            if (stderr) {
                console.error('stderr:', stderr);
            }

            const resource = createAudioResource(fs.createReadStream(tempAudioFile), { inputType: AudioPlayerInputType.Arbitrary });
            const player = createAudioPlayer();
            
            player.on(AudioPlayerStatus.Idle, () => {
                serverQueue.songs.shift();
                playSong(guild, serverQueue.songs[0]);
            });

            player.on('error', (error) => {
                console.error("Error playing audio:", error);
                if (serverQueue && serverQueue.connection) {
                    serverQueue.connection.destroy();
                }
                queue.delete(guild.id);
            });

            if (serverQueue && serverQueue.connection) {
                serverQueue.connection.subscribe(player);
            }

            player.play(resource);
            serverQueue.player = player;

            guild.systemChannel?.send(`üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: **${song.title}**`);
        });

    } catch (err) {
        console.error(err);
        if (serverQueue && serverQueue.connection) {
            serverQueue.connection.destroy();
        }
        queue.delete(guild.id);
        guild.systemChannel?.send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á!');
    }
}

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;

    const args = message.content.slice(prefix.length).trim().split(' ');
    const command = args.shift().toLowerCase();
    const voiceChannel = message.member.voice.channel;

    if (command === 'play') {
        if (!voiceChannel) return message.reply('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!');

        const serverQueue = queue.get(message.guild.id);

        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å URL ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ yt-dlp
            exec(`yt-dlp -j ${args[0]}`, (err, stdout, stderr) => {
                if (err) {
                    console.error(err);
                    return message.reply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ!');
                }

                const songInfo = JSON.parse(stdout);
                const song = { title: songInfo.title, url: songInfo.webpage_url };

                if (!serverQueue) {
                    const queueContruct = { voiceChannel, connection: null, songs: [] };
                    queue.set(message.guild.id, queueContruct);
                    queueContruct.songs.push(song);

                    const connection = joinVoiceChannel({
                        channelId: voiceChannel.id,
                        guildId: message.guild.id,
                        adapterCreator: voiceChannel.guild.voiceAdapterCreator,
                    });
                    queueContruct.connection = connection;
                    playSong(message.guild, queueContruct.songs[0]);
                } else {
                    serverQueue.songs.push(song);
                    return message.reply(`üé∂ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á ${song.title} ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß!`);
                }
            });
        } catch (err) {
            console.error(err);
            return message.reply('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube ‡πÑ‡∏î‡πâ!');
        }
    }

    if (command === 'skip') {
        const serverQueue = queue.get(message.guild.id);
        if (!serverQueue) return message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°!');
        serverQueue.player.stop();
        return message.reply('‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á!');
    }

    if (command === 'stop') {
        const serverQueue = queue.get(message.guild.id);
        if (!serverQueue) return message.reply('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô!');
        serverQueue.songs = [];
        if (serverQueue.connection) {
            serverQueue.connection.destroy();
        }
        queue.delete(message.guild.id);
        return message.reply('üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á!');
    }

    if (command === 'volume') {
        const volume = parseFloat(args[0]);
        if (isNaN(volume) || volume < 0 || volume > 1) return message.reply('‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.0 ‡∏ñ‡∏∂‡∏á 1.0!');
        const serverQueue = queue.get(message.guild.id);
        if (serverQueue) {
            serverQueue.player.setVolume(volume);
            return message.reply(`üîä ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô ${volume * 100}%`);
        }
    }
});

client.login(process.env.DISCORD_TOKEN);
